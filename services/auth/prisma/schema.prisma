// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id String @id @default(uuid())
  email String @unique
  password String
  salt String?
  roleId String 
  verified Boolean @default(false)
  role Role @relation(fields: [roleId],references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  resetPasswords ResetPassword[]
  @@index([email])
}
model Role {
  id String @id @default(uuid())
  name String @unique
  descriptions String?
  permissions RolePermission[]
  user User[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
model Permission {
  id String @id @default(uuid())
  name String @unique
  description String?
  roles RolePermission[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model RolePermission {
  id String @id @default(uuid())
  roleId String
  permissionId String
  role Role @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  @@unique([roleId, permissionId])
}
model Otp{
  id String @id @default(uuid())
  email String @unique
  otp Int
  expiresIn DateTime @map("expires_in")
  updatedAt DateTime @updatedAt @map("updated_at")
}
model ResetPassword {
  id String @id @default(uuid())
  userId String
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
  token String @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
}